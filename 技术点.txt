
楚明远
	主页tabhost
		采用FragmentTabHost技术，切换更流畅，更省内存 传入fragment 和 tag绑定 新的fragment 创建初始化并绑定tag 已经创建，直接attach
		fragment不走oncreat 也不走 只能走onattach 
		detach()
		会将view从UI中移除,和remove()不同,此时fragment的状态依然由FragmentManager维护。
		attach()
		重建view视图，附加到UI上并显示。
		
	ui框架 
		整合之前的框架 修改数据判断逻辑
		整合顶部toolbar的任意的任性要求
	多采用接口 耦合性很低 扩展性很强
		展示activity中创建toolbar 统一了所有风格，在toolbar上封装了左中右的控件 并在框架中设置了方法 直接调用就可以获得想要的view，进行设置
	图片整合okhttp框架 更快
	网络框架满足所有任性要求
	封装了get post body head body+head xml 只获取缓存 
	中文字符获取对应拼音首字母
	继承图片选择器 自动请求权限
	
	表情编辑
		采用枚举封装表情的字段 文字 资源id 等 封装方法直接获取表情集合
	纯文字发送，文字+图片发送（适配7.1.1）
	URl不一样 先发送第一张图 获取token 发送第二张用上一张token 图片发送完之后发送文字，key用 images 带上上一张图片的token
	
		tablayout + viewpager 里面放fragment 不走oncreat方法
	回显
		编辑的时候试试保存数据 记录数据 提升用户体验
	增强版流式布局
		之前那个丽水布局最后一行会展满全局，我把layout修改了下，通过计算，重新布局，使得都挨个放
	选择好友后的页面回显
		从一个activity的fragment传到另一个activity的fragment 克服重重困难
	
	xml解析 
		通过分析xml，分析数据结构，在类中添加list，一个类中解决
	recyclerview预读取机制提升体验
		layoutmanager.setInitialItemPrefetchCount()
		
	新款缓存数据框架
		1 获取缓存数据
			为空 没缓存
				联网获取
					为空 返回空
					有数据 
						集合 判断集合大小 有数据返回数据，主线程显示界面，大小是0返回空
					有数据
						不是集合 返回数据，主线程显示界面
			不为空 有缓存
				有数据 
						集合 判断集合大小 有数据返回数据，主线程显示界面，大小是0返回空
				有数据
						不是集合 返回数据，主线程显示界面
				没数据 联网获取
					为空 返回空
					有数据 
						集合 判断集合大小 有数据返回数据，主线程显示界面（或者刷新数据，全部由调用者自己随意操作），大小是0返回空
					有数据
						不是集合 返回数据，主线程显示界面
		最后成成四个方法 	
							创建成功的view
							获取缓存
							获取网络
							初始化view 加入数据
		优点 将获取数据和设置视图分开 再也不用自己去判断数据状态
			逻辑更清晰，代码耦合性很低 强烈推荐
			
							
	recyclerview 上拉加载更多多条目adapter
		多条目recycleriew
			将数据的class和对应数据所依赖的布局绑定一块传进去
				每种数据就和布局绑定
				获取条目种类 根据对应数据的class，在找到其绑定的布局，将布局id作为type 传出去，
				通过传过来的type 这个type  就是资源id 直接填充为布局，加载到viewholder 返回
				初始化viewholder直接用接口回调传出去让调用者处理 想怎么玩就怎么玩
		去除了繁琐的判断type
		去除了繁琐的填充布局
		逻辑更清晰，数据和布局绑定，更不会出错
	上拉加载更多的adapter
		采用装饰模式
		封装了3个view 也可以自己传入布局（失败，加载中，没有更多）
		通过监听条目粘贴到view上，回调出去，在外面进行判断
		设置了一个参数控制显示哪个view，检测到adapter滑到最后的时候用户传入的参数进行切换viewholder
		扩展性强，想要加载不想要加载 一个方法设置
		逻辑完整 失败，加载中，没有更多 都有
		一个字 吊 
	
		
		
	

